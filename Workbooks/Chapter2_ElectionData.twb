<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20212.21.0605.1023                               -->
<workbook include-phone-layouts='false' original-version='18.1' source-build='2021.2.0 (20212.21.0605.1023)' source-platform='mac' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <IncludePhoneLayoutsOptOut />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <repository-location derived-from='https://public.tableau.com/workbooks/Chapter2Examples?rev=1.3' id='Chapter2Examples' path='/workbooks' revision='1.3' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style>
    <_.fcp.MarkAnimation.true...style-rule element='animation'>
      <format attr='animation-on' value='ao-off' />
    </_.fcp.MarkAnimation.true...style-rule>
  </style>
  <datasources>
    <datasource caption='Results1999To2019' inline='true' name='federated.0o8xxq30r1659613pyvqk0jgd4h7' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Elections_dataset' name='textscan.161zba51384m1r1fkxxmj0y6andi'>
            <connection class='textscan' directory='/Users/gurukrupa/Sharada/MyBook/Final_Edits/dataset' filename='Elections_dataset.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.161zba51384m1r1fkxxmj0y6andi' name='Elections_dataset.csv' table='[Elections_dataset#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='string' name='State' ordinal='0' />
            <column datatype='string' name='Constituency Name' ordinal='1' />
            <column datatype='string' name='Candidate' ordinal='2' />
            <column datatype='string' name='Party' ordinal='3' />
            <column datatype='integer' name='Votes Margin' ordinal='4' />
            <column datatype='integer' name='Year' ordinal='5' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.161zba51384m1r1fkxxmj0y6andi' name='Elections_dataset.csv' table='[Elections_dataset#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='string' name='State' ordinal='0' />
            <column datatype='string' name='Constituency Name' ordinal='1' />
            <column datatype='string' name='Candidate' ordinal='2' />
            <column datatype='string' name='Party' ordinal='3' />
            <column datatype='integer' name='Votes Margin' ordinal='4' />
            <column datatype='integer' name='Year' ordinal='5' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Elections_dataset.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;Rs&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_IN&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Elections_dataset.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Constituency Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Constituency Name]</local-name>
            <parent-name>[Elections_dataset.csv]</parent-name>
            <remote-alias>Constituency Name</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Candidate</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Candidate]</local-name>
            <parent-name>[Elections_dataset.csv]</parent-name>
            <remote-alias>Candidate</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Party</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Party]</local-name>
            <parent-name>[Elections_dataset.csv]</parent-name>
            <remote-alias>Party</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Votes Margin</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Votes Margin]</local-name>
            <parent-name>[Elections_dataset.csv]</parent-name>
            <remote-alias>Votes Margin</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[Elections_dataset.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <semantic-values semantic-role='[State].[Name]'>
          <semantic-value key='&quot;Dadar &amp; Nagar Haveli&quot;' value='&quot;Dadra and Nagar Haveli&quot;' />
        </semantic-values>
      </column>
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Elections_dataset.csv' datatype='table' name='[__tableau_internal_object_id__].[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]' role='measure' type='quantitative' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='/Users/gurukrupa/Sharada/Git/DataVisualizationAndStorytellingBook-main/Workbooks/Chapter2_ElectionData.twb Files/Data/tableau-temp/#TableauTemp_17dmdbe08md3q41dv53yc13n13w0.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='12/04/2021 01:15:26 PM' username=''>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <refresh>
            <refresh-event add-from-file-path='Results1999To2019' increment-value='%null%' refresh-type='create' rows-inserted='2673' timestamp-start='2021-12-04 13:15:26.515' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>State</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State</remote-alias>
              <ordinal>0</ordinal>
              <family>Elections_dataset.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>41</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Constituency Name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Constituency Name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Constituency Name</remote-alias>
              <ordinal>1</ordinal>
              <family>Elections_dataset.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>715</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Candidate</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Candidate]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Candidate</remote-alias>
              <ordinal>2</ordinal>
              <family>Elections_dataset.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1652</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Party</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Party]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Party</remote-alias>
              <ordinal>3</ordinal>
              <family>Elections_dataset.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>63</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Votes Margin</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Votes Margin]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Votes Margin</remote-alias>
              <ordinal>4</ordinal>
              <family>Elections_dataset.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2551</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Year</remote-alias>
              <ordinal>5</ordinal>
              <family>Elections_dataset.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>5</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Elections_dataset.csv' id='Elections_dataset.csv_F90372E2B5054DAE9ED66EF03C6FECEA'>
            <properties context=''>
              <relation connection='textscan.161zba51384m1r1fkxxmj0y6andi' name='Elections_dataset.csv' table='[Elections_dataset#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
                  <column datatype='string' name='State' ordinal='0' />
                  <column datatype='string' name='Constituency Name' ordinal='1' />
                  <column datatype='string' name='Candidate' ordinal='2' />
                  <column datatype='string' name='Party' ordinal='3' />
                  <column datatype='integer' name='Votes Margin' ordinal='4' />
                  <column datatype='integer' name='Year' ordinal='5' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='all_result' inline='true' name='federated.0h3ay5j07wou4u18jwcfn15sc1gt' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='all_result' name='textscan.0dg555u0homvfa1bcyw3i1u5m01n'>
            <connection class='textscan' directory='/var/folders/n2/sjgl93952fz12m3jphk11kf40000gn/T/tableau-temp/1782106708/Data' filename='all_result.csv' server='' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0dg555u0homvfa1bcyw3i1u5m01n' name='all_result.csv' table='[all_result#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='string' name='State' ordinal='0' />
            <column datatype='string' name='Constituency Name' ordinal='1' />
            <column datatype='string' name='Candidate' ordinal='2' />
            <column datatype='string' name='Party' ordinal='3' />
            <column datatype='integer' name='Votes Margin' ordinal='4' />
            <column datatype='integer' name='Year' ordinal='5' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.0dg555u0homvfa1bcyw3i1u5m01n' name='all_result.csv' table='[all_result#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='string' name='State' ordinal='0' />
            <column datatype='string' name='Constituency Name' ordinal='1' />
            <column datatype='string' name='Candidate' ordinal='2' />
            <column datatype='string' name='Party' ordinal='3' />
            <column datatype='integer' name='Votes Margin' ordinal='4' />
            <column datatype='integer' name='Year' ordinal='5' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[all_result.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;Rs&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_IN&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[all_result.csv]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Constituency Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Constituency Name]</local-name>
            <parent-name>[all_result.csv]</parent-name>
            <remote-alias>Constituency Name</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Candidate</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Candidate]</local-name>
            <parent-name>[all_result.csv]</parent-name>
            <remote-alias>Candidate</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Party</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Party]</local-name>
            <parent-name>[all_result.csv]</parent-name>
            <remote-alias>Party</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Votes Margin</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Votes Margin]</local-name>
            <parent-name>[all_result.csv]</parent-name>
            <remote-alias>Votes Margin</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[all_result.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Calculation1' datatype='integer' name='[Calculation_1731563715761754115]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='MIN([Votes Margin])' />
      </column>
      <column datatype='string' name='[Constituency Name]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='integer' name='[Votes Margin]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Migrated Data' datatype='table' name='[__tableau_internal_object_id__].[Migrated Data]' role='measure' type='quantitative' />
      <column-instance column='[Votes Margin]' derivation='Avg' name='[avg:Votes Margin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Votes Margin]' derivation='Sum' name='[cum:sum:Votes Margin:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[Votes Margin]' derivation='Max' name='[max:Votes Margin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Votes Margin]' derivation='Min' name='[min:Votes Margin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Constituency Name]' derivation='None' name='[none:Constituency Name:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Votes Margin]' derivation='Sum' name='[sum:Votes Margin:qk]' pivot='key' type='quantitative' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='Migrated Data' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='/Users/gurukrupa/Sharada/Git/DataVisualizationAndStorytellingBook-main/Workbooks/Chapter2_ElectionData.twb Files/Data/tableau-temp 1/#TableauTemp_1mppj4i1aw2e6a1cm3g2m1gbpyne.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='03/12/2020 03:30:06 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>State</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State</remote-alias>
              <ordinal>0</ordinal>
              <family>all_result.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>34</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Constituency Name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Constituency Name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Constituency Name</remote-alias>
              <ordinal>1</ordinal>
              <family>all_result.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>545</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Candidate</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Candidate]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Candidate</remote-alias>
              <ordinal>2</ordinal>
              <family>all_result.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>971</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Party</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Party]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Party</remote-alias>
              <ordinal>3</ordinal>
              <family>all_result.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>42</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Votes Margin</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Votes Margin]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Votes Margin</remote-alias>
              <ordinal>4</ordinal>
              <family>all_result.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1041</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Year</remote-alias>
              <ordinal>5</ordinal>
              <family>all_result.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Migrated Data]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[usr:Calculation_1731563715680059394:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[sum:Votes Margin:qk]:1&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[avg:Votes Margin:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[cum:sum:Votes Margin:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[max:Votes Margin:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[min:Votes Margin:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[sum:Votes Margin:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Constituency Name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Aligarh&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ballia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bardhaman Purba&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bardoli&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bharatpur&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Buldhana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Dhenkanal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Eluru&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Gaya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Gonda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hoshangabad&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hoshiarpur&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kanthi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Karur&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kokrajhar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kota&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Madurai&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mahbubnagar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nandyal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nawada&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nellore&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Raipur&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Rajampet&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Shirdi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tiruvannamalai&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vidisha&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Adilabad&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Alipurduars&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ambala&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Amritsar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Amroha&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Araria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Aska&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Autonomous District&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Azamgarh&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bastar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belgaum&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chandigarh&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chandni Chowk&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chhindwara&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Davanagere&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ghatal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gwalior&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hathras&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kanniyakumari&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Khagaria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lakshadweep&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mandya&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mumbai-North-West&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;North Goa&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Pali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Patan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ratnagiri-Sindhudurg&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Serampore&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sikkim&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sitamarhi&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sitapur&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sundargarh&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Theni&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Unnao&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ahmednagar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Balurghat&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Banswara&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Baramulla&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Begusarai&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bhadrak&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Chikkodi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Dhar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Faizabad&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Fatehgarh Sahib&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Gauhati&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hindupur&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hisar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jalpaiguri&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kairana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kanker&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Karimnagar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Latur&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Machilipatnam&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Maharajganj&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nanded&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;North West Delhi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rae Bareli&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sangli&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Solapur&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Surat&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tirunelveli&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vaishali&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Gurgaon&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;North East Delhi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Alwar&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Banda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bhilwara&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Birbhum&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chhota Udaipur&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Churu&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Etawah&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Firozabad&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hajipur&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Indore&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kancheepuram&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kandhamal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kurnool&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Maldaha Dakshin&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Misrikh&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nagaur&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nalgonda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nowgong&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Patiala&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pilibhit&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Purnia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Salempur&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sikar&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tumkur&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Visakhapatnam&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Anantapur&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Araku&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bardhaman-Durgapur&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bareilly&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bharuch&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chittorgarh&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Erode&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fatehpur&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Gaya (Sc)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jagatsinghpur&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jalandhar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jalaun&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamshedpur&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kolkata Dakshin&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Krishnagiri&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lakhimpur&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malkajgiri&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Meerut&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nagaland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Paschim Champaran&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Perambalur&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rajgarh&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rajnandgaon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Shirur&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tonk-Sawai Madhopur&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Vijayawada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ajmer&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Amreli&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bahraich&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bangaon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Betul&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bhagalpur&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bhubaneswar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Chitradurga&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dharmapuri&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ferozpur&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Giridih&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hingoli&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jangipur&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jorhat&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kaiserganj&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Khammam&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Koppal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Korba&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Madha&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Munger&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Muzaffarnagar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Raichur&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sant Kabir Nagar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Shillong&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Surendranagar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tirupati&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Valmiki Nagar&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Sirsa&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Andaman and Nicobar Islands&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bangalore South&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Beed&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chennai North&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Diamond Harbour&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dumka&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Gautam Buddha Nagar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hardwar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jhunjhunu&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Karakat&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ladakh&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mandla&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mumbai-North-Central&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Navsari&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Palamu&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Puri&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Raiganj&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ranchi&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sasaram (Sc)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Satara&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Thane&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ujjain&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Warangal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Agra&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ahmedabad East&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Anandpur Sahib&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Arambagh&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Arrah&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Badaun&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Balasore&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Barpeta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bellary&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bhongir&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bilaspur&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Dadar &amp; Nagar Haveli&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Deoria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ghaziabad&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hatkanangle&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hooghly&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kanpur&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kishanganj&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kolar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Morena&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mumbai-South&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Porbandar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Puducherry&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Raver&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sivaganga&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Siwan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Srerampur&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Thoothukkudi&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Uttara Kannada&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Amethi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bangalore North&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Basti&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cooch Behar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cuddalore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Damoh&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Garhwal&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Hamirpur&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jamui (Sc)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jhansi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kheri&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kurukshetra&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mahesana&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mayurbhanj&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Moradabad&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Murshidabad&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Narsapuram&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Osmanabad&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ramtek&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saran&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Secunderabad&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sriperumbudur&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tenkasi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Udupi Chikmagalur&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;West Delhi&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Akbarpur&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anand&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Balaghat&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bankura&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bhadohi&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bolangir&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Buxar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chittoor&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Dharwad&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Firozpur&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Godda&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jaipur&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jhargram&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kakinada&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kaliabor&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kaushambi&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mahabubabad&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mahasamund&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Maval&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Muzaffarpur&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nandurbar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Raigad&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sagar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Shimla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tiruppur&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vadodara&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Varanasi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Amalapuram&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bangalore Central&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bhind&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bishnupur&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Coimbatore&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dahod&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dindigul&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gadchiroli-Chimur&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hajipur (Sc)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Inner Manipur&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Jaunpur&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kachchh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kendrapara&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Khandwa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mainpuri&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Maldaha Uttar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nagina&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nizamabad&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pollachi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Purvi Champaran&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rajsamand&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sangrur&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Silchar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sonipat&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Srikakulam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tura&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Vizianagaram&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Anantnag&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Arunachal East&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bhiwandi&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bolpur&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Chandrapur&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dindori&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Gandhinagar&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Gulbarga&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jabalpur&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jahanabad&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jhalawar-Baran&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Keonjhar&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Khargone&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kheda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mathurapur&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mizoram&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Nagpur&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Peddapalle&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pratapgarh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ramanathapuram&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Samastipur&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Srinagar&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tezpur&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Udaipur&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Amravati&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bangalore Rural&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bhopal&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chennai Central&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Darjeeling&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Domariyaganj&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guna&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hardoi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jhanjharpur&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Junagadh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kannauj&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Khunti&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mandi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mehsana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nabarangpur&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nashik&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Outer Manipur&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Purulia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sambhal&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sasaram&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Secundrabad&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sultanpur&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Udhampur&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Yavatmal-Washim&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Aonla&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bansgaon&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bidar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chennai South&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dausa&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dum Dum&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guntur&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hassan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jodhpur&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Katihar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kodarma&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mandsaur&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mumbai-North-East&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Palghar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Panchmahal&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ranaghat&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ratlam&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sambalpur&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Satna&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sheohar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Thanjavur&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Zahirabad&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Allahabad&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Barabanki&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Barrackpore&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bijnor&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Chamarajanagar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Dhule&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Faridabad&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fatehpur Sikri&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gopalganj&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jajpur&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jalgaon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kallakurichi&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Khadoor Sahib&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kolkata Uttar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lucknow&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mangaldoi&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Medak&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mumbai-North&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nagapattinam&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Delhi&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nilgiris&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pataliputra&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Salem&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sarguja&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Shravasti&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tripura East&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Viluppuram&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Karnal&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;South Delhi&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Akola&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Banaskantha&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bapatla&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Barasat&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bhandara-Gondiya&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bulandshahr&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cuttack&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Darbhanga&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Dhaurahra&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Farrukhabad&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gurdaspur&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jaipur Rural&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jammu&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Joynagar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Karimganj&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lohardaga&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mahabubnagar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mayiladuthurai&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mysore&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nalanda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Raigarh&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Rajahmundry&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saharanpur&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Shimoga&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tiruvallur&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Valsad&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Vellore&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Anakapalli&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Asansol&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Aurangabad&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bagalkot&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bargarh&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bathinda&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bhiwani-Mahendragarh&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bijapur&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chelvella&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chidambaram&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dewas&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dhubri&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Durg&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;East Delhi&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ghazipur&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Haveri&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Howrah&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Karauli-Dholpur&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kolhapur&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Madhepura&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mathura&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mumbai-South-Central&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Parbhani&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rajkot&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rewa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Shahdol&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Goa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Supaul&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tamluk&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tikamgarh&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ambedkar Nagar&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Arunachal West&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bikaner&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Burdwan - Durgapur&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chatra&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dakshina Kannada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ganganagar&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jalore&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jamnagar&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jamui&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kangra&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Koraput&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kushi Nagar&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kutch&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Medinipur&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mohanlalganj&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Nainital-Udhamsingh Nagar&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ongole&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Peddapalli&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rampur&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Samastipur (Sc)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Singhbhum&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tehri Garhwal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Wardha&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Almora&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Arani&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Barmer&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Basirhat&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bhavnagar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Chandauli&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Etah&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gopalganj (Sc)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gorakhpur&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jalna&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kalahandi&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kalyan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Khajuraho&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Krishnanagar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ludhiana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mirzapur&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nagarkurnool&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Narasaraopet&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nawgong&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Patna Sahib&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Phulpur&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rajmahal&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sidhi&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Surguja&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tripura West&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Virudhunagar&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Rohtak&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ahmedabad West&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Arakkonam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Baghpat&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Baharampur&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Banka&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Baramati&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Berhampur&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Chikkaballapur&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dhanbad&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dibrugarh&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Faridkot&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ghosi&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hazaribagh&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hyderabad&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jadavpur&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Janjgir-Champa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kadapa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Lalganj&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Machhlishahr&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Madhubani&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Namakkal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Pune&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Robertsganj&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sabarkantha&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Shahjahanpur&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tiruchirappalli&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ujiarpur&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Uluberia&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Migrated Data' id='Migrated Data'>
            <properties context=''>
              <relation connection='textscan.0dg555u0homvfa1bcyw3i1u5m01n' name='all_result.csv' table='[all_result#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
                  <column datatype='string' name='State' ordinal='0' />
                  <column datatype='string' name='Constituency Name' ordinal='1' />
                  <column datatype='string' name='Candidate' ordinal='2' />
                  <column datatype='string' name='Party' ordinal='3' />
                  <column datatype='integer' name='Votes Margin' ordinal='4' />
                  <column datatype='integer' name='Year' ordinal='5' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='FIGURE 2.1'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Votes margin by Constituencies&#10;</run>
            <run bold='true'><![CDATA[State: <[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]>]]></run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location derived-from='https://public.tableau.com/workbooks/Chapter2Examples/FIGURE2_1?rev=' id='33166941' path='/workbooks/Chapter2Examples' revision='' />
      <table>
        <view>
          <datasources>
            <datasource caption='Results1999To2019' name='federated.0o8xxq30r1659613pyvqk0jgd4h7' />
          </datasources>
          <datasource-dependencies datasource='federated.0o8xxq30r1659613pyvqk0jgd4h7'>
            <column datatype='string' name='[Constituency Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Dadar &amp; Nagar Haveli&quot;' value='&quot;Dadra and Nagar Haveli&quot;' />
              </semantic-values>
            </column>
            <column datatype='integer' name='[Votes Margin]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Constituency Name]' derivation='None' name='[none:Constituency Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Votes Margin]' derivation='Sum' name='[sum:Votes Margin:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]'>
            <groupfilter function='member' level='[none:State:nk]' member='&quot;Delhi&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]' included-values='in-range'>
            <min>2014</min>
            <max>2014</max>
          </filter>
          <slices>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</column>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='width' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]' value='68' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]' value='true' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' value='Select State'>
              <formatted-text>
                <run>Select State</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]</rows>
        <cols>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</cols>
      </table>
      <simple-id uuid='{E11D016A-8852-48A0-B3BA-021E914EB8DF}' />
    </worksheet>
    <worksheet name='FIGURE 2.12'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Votes margin by Constituency
State: Delhi</run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location derived-from='https://public.tableau.com/workbooks/Examples_15837744257450/Example6?rev=' id='FIGURE2_16' path='/workbooks/Chapter2Examples_3' revision='' />
      <table>
        <view>
          <datasources>
            <datasource caption='all_result' name='federated.0h3ay5j07wou4u18jwcfn15sc1gt' />
          </datasources>
          <datasource-dependencies datasource='federated.0h3ay5j07wou4u18jwcfn15sc1gt'>
            <column caption='Calculation1' datatype='integer' name='[Calculation_1731563715761754115]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='MIN([Votes Margin])' />
            </column>
            <column datatype='string' name='[Constituency Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='integer' name='[Votes Margin]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Constituency Name]' derivation='None' name='[none:Constituency Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Votes Margin]' derivation='Sum' name='[sum:Votes Margin:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1731563715761754115]' derivation='User' name='[usr:Calculation_1731563715761754115:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:State:nk]'>
            <groupfilter function='member' level='[none:State:nk]' member='&quot;Delhi&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:Year:qk]' included-values='in-range'>
            <min>2014</min>
            <max>2014</max>
          </filter>
          <slices>
            <column>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:State:nk]</column>
            <column>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[sum:Votes Margin:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:State:nk]' value='Select State'>
              <formatted-text>
                <run>Select State</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <size column='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[usr:Calculation_1731563715761754115:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-range-scope' value='table' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='range' />
                <format attr='mark-labels-range-field' value='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[usr:Calculation_1731563715761754115:qk]' />
                <format attr='mark-labels-range-max' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[sum:Votes Margin:qk]</rows>
        <cols>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:Constituency Name:nk]</cols>
      </table>
      <simple-id uuid='{DB8AA934-318A-4CC7-B21A-73D0A8A52358}' />
    </worksheet>
    <worksheet name='FIGURE 2.13'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Votes margin by Constituencies&#10;</run>
            <run bold='true'>State: Haryana</run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location derived-from='https://public.tableau.com/workbooks/Examples_15837744257450/Example7?rev=' id='FIGURE2_17' path='/workbooks/Chapter2Examples_3' revision='' />
      <table>
        <view>
          <datasources>
            <datasource caption='all_result' name='federated.0h3ay5j07wou4u18jwcfn15sc1gt' />
          </datasources>
          <datasource-dependencies datasource='federated.0h3ay5j07wou4u18jwcfn15sc1gt'>
            <column datatype='string' name='[Constituency Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='integer' name='[Votes Margin]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Constituency Name]' derivation='None' name='[none:Constituency Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Votes Margin]' derivation='Sum' name='[sum:Votes Margin:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:State:nk]'>
            <groupfilter function='member' level='[none:State:nk]' member='&quot;Haryana&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:Year:qk]' included-values='in-range'>
            <min>2014</min>
            <max>2014</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:Constituency Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[sum:Votes Margin:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:Year:qk]</column>
            <column>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:State:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:State:nk]' value='Select State'>
              <formatted-text>
                <run>Select State</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
          </pane>
        </panes>
        <rows>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:Constituency Name:nk]</rows>
        <cols>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[sum:Votes Margin:qk]</cols>
      </table>
      <simple-id uuid='{725CA1EC-9B28-4104-AA95-F31705114ACC}' />
    </worksheet>
    <worksheet name='FIGURE 2.2'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Votes margin by Constituencies&#10;</run>
            <run bold='true'><![CDATA[State: <[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]>]]></run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location derived-from='https://public.tableau.com/workbooks/Chapter2Examples/FIGURE2_2?rev=' id='33166942' path='/workbooks/Chapter2Examples' revision='' />
      <table>
        <view>
          <datasources>
            <datasource caption='Results1999To2019' name='federated.0o8xxq30r1659613pyvqk0jgd4h7' />
          </datasources>
          <datasource-dependencies datasource='federated.0o8xxq30r1659613pyvqk0jgd4h7'>
            <column datatype='string' name='[Constituency Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Dadar &amp; Nagar Haveli&quot;' value='&quot;Dadra and Nagar Haveli&quot;' />
              </semantic-values>
            </column>
            <column datatype='integer' name='[Votes Margin]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Constituency Name]' derivation='None' name='[none:Constituency Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Votes Margin]' derivation='Sum' name='[sum:Votes Margin:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]'>
            <groupfilter function='member' level='[none:State:nk]' member='&quot;Haryana&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]' included-values='in-range'>
            <min>2014</min>
            <max>2014</max>
          </filter>
          <slices>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</column>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' value='Select State'>
              <formatted-text>
                <run>Select State</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</rows>
        <cols>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]</cols>
      </table>
      <simple-id uuid='{4DECD860-E0CE-4A08-96F5-BDA2F7C74F5C}' />
    </worksheet>
    <worksheet name='FIGURE 2.3'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Votes margin by Constituencies&#10;</run>
            <run bold='true'><![CDATA[State: <[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]>]]></run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location derived-from='https://public.tableau.com/workbooks/Chapter2Examples/FIGURE2_3?rev=' id='33166943' path='/workbooks/Chapter2Examples' revision='' />
      <table>
        <view>
          <datasources>
            <datasource caption='Results1999To2019' name='federated.0o8xxq30r1659613pyvqk0jgd4h7' />
          </datasources>
          <datasource-dependencies datasource='federated.0o8xxq30r1659613pyvqk0jgd4h7'>
            <column datatype='string' name='[Constituency Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Dadar &amp; Nagar Haveli&quot;' value='&quot;Dadra and Nagar Haveli&quot;' />
              </semantic-values>
            </column>
            <column datatype='integer' name='[Votes Margin]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Constituency Name]' derivation='None' name='[none:Constituency Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Votes Margin]' derivation='Sum' name='[sum:Votes Margin:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]'>
            <groupfilter function='member' level='[none:State:nk]' member='&quot;Haryana&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]' included-values='in-range'>
            <min>2014</min>
            <max>2014</max>
          </filter>
          <slices>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</column>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</rows>
        <cols>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]</cols>
      </table>
      <simple-id uuid='{DA0B6ECC-57FF-422E-AAB5-661A444C1C1F}' />
    </worksheet>
    <worksheet name='FIGURE 2.5'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Votes margin by Constituencies&#10;</run>
            <run bold='true'><![CDATA[State: <[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]>]]></run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location derived-from='https://public.tableau.com/workbooks/Chapter2Examples/FIGURE2_5?rev=' id='33166944' path='/workbooks/Chapter2Examples' revision='' />
      <table>
        <view>
          <datasources>
            <datasource caption='Results1999To2019' name='federated.0o8xxq30r1659613pyvqk0jgd4h7' />
          </datasources>
          <datasource-dependencies datasource='federated.0o8xxq30r1659613pyvqk0jgd4h7'>
            <column datatype='string' name='[Constituency Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Dadar &amp; Nagar Haveli&quot;' value='&quot;Dadra and Nagar Haveli&quot;' />
              </semantic-values>
            </column>
            <column datatype='integer' name='[Votes Margin]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Constituency Name]' derivation='None' name='[none:Constituency Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Votes Margin]' derivation='Sum' name='[sum:Votes Margin:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]'>
            <groupfilter function='member' level='[none:State:nk]' member='&quot;West Bengal&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]' included-values='in-range'>
            <min>2014</min>
            <max>2014</max>
          </filter>
          <slices>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</column>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]' palette='gold_purple_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' value='Select State'>
              <formatted-text>
                <run>Select State</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{4521AC1F-E55D-4D34-BD8B-6CFD4141B0D7}' />
    </worksheet>
    <worksheet name='FIGURE 2.6'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Votes margin by Constituencies&#10;</run>
            <run bold='true'><![CDATA[State: <[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]>]]></run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location derived-from='https://public.tableau.com/workbooks/Chapter2Examples/FIGURE2_6?rev=' id='33166945' path='/workbooks/Chapter2Examples' revision='' />
      <table>
        <view>
          <datasources>
            <datasource caption='Results1999To2019' name='federated.0o8xxq30r1659613pyvqk0jgd4h7' />
          </datasources>
          <datasource-dependencies datasource='federated.0o8xxq30r1659613pyvqk0jgd4h7'>
            <column datatype='string' name='[Constituency Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Dadar &amp; Nagar Haveli&quot;' value='&quot;Dadra and Nagar Haveli&quot;' />
              </semantic-values>
            </column>
            <column datatype='integer' name='[Votes Margin]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Constituency Name]' derivation='None' name='[none:Constituency Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Votes Margin]' derivation='Sum' name='[sum:Votes Margin:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <manual-sort column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Baharampur&quot;</bucket>
              <bucket>&quot;Jhargram&quot;</bucket>
              <bucket>&quot;Arambagh&quot;</bucket>
              <bucket>&quot;Ghatal&quot;</bucket>
              <bucket>&quot;Tamluk&quot;</bucket>
              <bucket>&quot;Bolpur&quot;</bucket>
              <bucket>&quot;Kanthi&quot;</bucket>
              <bucket>&quot;Barrackpore&quot;</bucket>
              <bucket>&quot;Ranaghat&quot;</bucket>
              <bucket>&quot;Uluberia&quot;</bucket>
              <bucket>&quot;Darjeeling&quot;</bucket>
              <bucket>&quot;Howrah&quot;</bucket>
              <bucket>&quot;Hooghly&quot;</bucket>
              <bucket>&quot;Medinipur&quot;</bucket>
              <bucket>&quot;Barasat&quot;</bucket>
              <bucket>&quot;Maldaha Dakshin&quot;</bucket>
              <bucket>&quot;Dum Dum&quot;</bucket>
              <bucket>&quot;Purulia&quot;</bucket>
              <bucket>&quot;Serampore&quot;</bucket>
              <bucket>&quot;Bishnupur&quot;</bucket>
              <bucket>&quot;Bangaon&quot;</bucket>
              <bucket>&quot;Mathurapur&quot;</bucket>
              <bucket>&quot;Kolkata Dakshin&quot;</bucket>
              <bucket>&quot;Jadavpur&quot;</bucket>
              <bucket>&quot;Bardhaman Purba&quot;</bucket>
              <bucket>&quot;Basirhat&quot;</bucket>
              <bucket>&quot;Joynagar&quot;</bucket>
              <bucket>&quot;Bardhaman-Durgapur&quot;</bucket>
              <bucket>&quot;Balurghat&quot;</bucket>
              <bucket>&quot;Bankura&quot;</bucket>
              <bucket>&quot;Kolkata Uttar&quot;</bucket>
              <bucket>&quot;Cooch Behar&quot;</bucket>
              <bucket>&quot;Diamond Harbour&quot;</bucket>
              <bucket>&quot;Krishnanagar&quot;</bucket>
              <bucket>&quot;Asansol&quot;</bucket>
              <bucket>&quot;Jalpaiguri&quot;</bucket>
              <bucket>&quot;Birbhum&quot;</bucket>
              <bucket>&quot;Maldaha Uttar&quot;</bucket>
              <bucket>&quot;Alipurduars&quot;</bucket>
              <bucket>&quot;Murshidabad&quot;</bucket>
              <bucket>&quot;Jangipur&quot;</bucket>
              <bucket>&quot;Raiganj&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]'>
            <groupfilter function='member' level='[none:State:nk]' member='&quot;West Bengal&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]' included-values='in-range'>
            <min>2014</min>
            <max>2014</max>
          </filter>
          <slices>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</column>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]' palette='gold_purple_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' value='Select State'>
              <formatted-text>
                <run>Select State</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{FA3C9488-6349-4831-86B2-D9B5918FF253}' />
    </worksheet>
    <worksheet name='FIGURE 2.7'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Lok Sabha 2014 - Average votes margin across all states</run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location derived-from='https://public.tableau.com/workbooks/Chapter2Examples/FIGURE2_9?rev=' id='33166946' path='/workbooks/Chapter2Examples' revision='' />
      <table>
        <view>
          <datasources>
            <datasource caption='Results1999To2019' name='federated.0o8xxq30r1659613pyvqk0jgd4h7' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0o8xxq30r1659613pyvqk0jgd4h7'>
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Dadar &amp; Nagar Haveli&quot;' value='&quot;Dadra and Nagar Haveli&quot;' />
              </semantic-values>
            </column>
            <column datatype='integer' name='[Votes Margin]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Votes Margin]' derivation='Avg' name='[avg:Votes Margin:qk]' pivot='key' type='quantitative' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]' included-values='in-range'>
            <min>2014</min>
            <max>2014</max>
          </filter>
          <slices>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[Longitude (generated)]' field-type='quantitative' max='12121857.216946784' min='6303597.4273806512' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[Latitude (generated)]' field-type='quantitative' max='4628803.5760952048' min='569047.7713205613' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[avg:Votes Margin:qk]' num-steps='5' palette='green_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' />
              <color column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[avg:Votes Margin:qk]' />
              <geometry column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[Latitude (generated)]</rows>
        <cols>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{336A10C1-132D-4151-9DF1-93BA167AA1F1}' />
    </worksheet>
    <worksheet name='FIGURE 2.8'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Votes margin by Constituencies&#10;</run>
            <run bold='true'><![CDATA[State: <[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]>]]></run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location derived-from='https://public.tableau.com/workbooks/Chapter2Examples/FIGURE2_12?rev=' id='33166947' path='/workbooks/Chapter2Examples' revision='' />
      <table>
        <view>
          <datasources>
            <datasource caption='Results1999To2019' name='federated.0o8xxq30r1659613pyvqk0jgd4h7' />
          </datasources>
          <datasource-dependencies datasource='federated.0o8xxq30r1659613pyvqk0jgd4h7'>
            <column datatype='string' name='[Constituency Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Dadar &amp; Nagar Haveli&quot;' value='&quot;Dadra and Nagar Haveli&quot;' />
              </semantic-values>
            </column>
            <column datatype='integer' name='[Votes Margin]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Constituency Name]' derivation='None' name='[none:Constituency Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Votes Margin]' derivation='Sum' name='[sum:Votes Margin:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]'>
            <groupfilter function='member' level='[none:State:nk]' member='&quot;Haryana&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]' included-values='in-range'>
            <min>2014</min>
            <max>2014</max>
          </filter>
          <slices>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</column>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' value='Select State'>
              <formatted-text>
                <run>Select State</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <size column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.5052486658096313' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{CB0A26AF-BBAE-455B-9A0C-2EF100F98D3D}' />
    </worksheet>
    <worksheet name='FIGURE 2.9'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Votes margin by Constituencies&#10;</run>
            <run bold='true'><![CDATA[State: <[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]>]]></run>
          </formatted-text>
        </title>
      </layout-options>
      <repository-location derived-from='https://public.tableau.com/workbooks/Chapter2Examples/FIGURE2_13?rev=' id='33166948' path='/workbooks/Chapter2Examples' revision='' />
      <table>
        <view>
          <datasources>
            <datasource caption='Results1999To2019' name='federated.0o8xxq30r1659613pyvqk0jgd4h7' />
          </datasources>
          <datasource-dependencies datasource='federated.0o8xxq30r1659613pyvqk0jgd4h7'>
            <column datatype='string' name='[Constituency Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Dadar &amp; Nagar Haveli&quot;' value='&quot;Dadra and Nagar Haveli&quot;' />
              </semantic-values>
            </column>
            <column datatype='integer' name='[Votes Margin]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Constituency Name]' derivation='None' name='[none:Constituency Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Votes Margin]' derivation='Sum' name='[sum:Votes Margin:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]'>
            <groupfilter function='member' level='[none:State:nk]' member='&quot;Haryana&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]' included-values='in-range'>
            <min>2014</min>
            <max>2014</max>
          </filter>
          <slices>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</column>
            <column>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' value='Select State'>
              <formatted-text>
                <run>Select State</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <size column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]' />
              <text column='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='user' />
                <format attr='color' value='#ffffff' />
                <format attr='font-size' value='8' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='1.5052486658096313' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{F5161DE9-A96E-41D2-89FD-BC3836FF7EE5}' />
    </worksheet>
  </worksheets>
  <windows source-height='51'>
    <window class='worksheet' name='FIGURE 2.1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='257'>
            <card mode='dropdown' param='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{50F1D9BE-B006-41BE-AB47-3D835F185FE2}' />
    </window>
    <window class='worksheet' name='FIGURE 2.2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7FF5B5BA-276B-46EA-9760-40E15838B80F}' />
    </window>
    <window class='worksheet' name='FIGURE 2.3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0D24D05E-BFF5-49F3-B8C9-01DC31BFFAF6}' />
    </window>
    <window class='worksheet' name='FIGURE 2.5'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='211'>
            <card mode='dropdown' param='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{853F4143-236F-4AAA-BADF-6BA70F54A848}' />
    </window>
    <window class='worksheet' name='FIGURE 2.6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='211'>
            <card mode='dropdown' param='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8E17497C-9AE5-40D6-9096-FD616E02CB48}' />
    </window>
    <window class='worksheet' name='FIGURE 2.7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[avg:Votes Margin:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[avg:Votes Margin:qk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8EB44E2D-982D-4B96-8561-5FF094BEEAEE}' />
    </window>
    <window class='worksheet' name='FIGURE 2.8'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[sum:Votes Margin:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{42AFFCAE-6556-4CD5-9FD6-523B159C62DD}' />
    </window>
    <window class='worksheet' name='FIGURE 2.9'>
      <cards>
        <edge name='left'>
          <strip size='187'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='140'>
            <card mode='dropdown' param='[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Constituency Name:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:State:nk]</field>
            <field>[federated.0o8xxq30r1659613pyvqk0jgd4h7].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{98B1F994-7C6F-434E-AAB1-A920DA9A8B7A}' />
    </window>
    <window class='worksheet' name='FIGURE 2.12'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:State:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:Constituency Name:nk]</field>
            <field>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:State:nk]</field>
            <field>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:Year:qk]</field>
            <field>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[sum:Votes Margin:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{3A62B1A6-AE5A-4C3F-A56C-4050D1CC1CD8}' />
    </window>
    <window class='worksheet' maximized='true' name='FIGURE 2.13'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:State:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:Constituency Name:nk]</field>
            <field>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:State:nk]</field>
            <field>[federated.0h3ay5j07wou4u18jwcfn15sc1gt].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{CEDA1F92-6A3C-4343-B81B-207E4DFB27F8}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='FIGURE 2.1' width='192'>
      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
      nap6AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='FIGURE 2.12' width='192'>
      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
      a9cSXQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='FIGURE 2.13' width='192'>
      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
      /we96pJfLoJAeQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='FIGURE 2.2' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAWOElEQVR4nO3dS2xc2ZnY8f991PvJh0qUKFJ8iaRedLtldNtGx7AxE2fhhZ0AXngxXs9m
      NgGySTCYBgYDIwmQRYDYCJBFgCyyThAEMGLDQdCNwG3BEiWRLIoixaqiWBRVJKtYD9at+ziz
      0LBGaqndIsVivb7fQhJLxe+eS/LjOefe892jKaUUQvQpvd0NEKKdejIBWt2pKaXO5RgSv/Xx
      ezIBXNdtaXzP8/A8r6XHcBxH4p9D/J5MACHeldnuBrTCkWXzl7/4n+1uxntSgCbxWxy/JxNA
      AZWjRrubIbqADIFEX5MEEH2tIxPg+fPnb73Mtb+//06vCfGuOm4OYNs2d+/e5aOPPqLRaFAo
      FDAMg6GhIdbW1ojH48zNzbG6usrIyAg7OzsYhsH6+jpzc3NEIpF2n4LoIh3XA+zt7TEwMMDa
      2ho7OzuMjIzg9/vZ2dkhEomQSqXIZrM4jsPS0hLwMmkajQaPHz9uc+tFt+m4BHj27BnXrl1D
      13U0TcPv9+P3+9F1nXq9zvb2NvV6Hc/z8Pv9AGQyGRKJRMvvPore03FDoA8++KA55FFKoes6
      iUQCeHmH9/gH37IsTNNE13WUUti2jc/na3PrRbfpuAQwDAMAXf/HzknTtDdeCwaDb/08IU6i
      44ZAQpwnSQDR1zpuCHQWDE3j1uSFlsU/nmtrLVzq4imF3sIDSPyXtF6sCHMcB9NsXW4fL7du
      5byj1ZN6if+SDIFEX5MEEH1NEkD0tZ6cBB9ZDn/17/9X6w5wPGtq4SRYqdNNsv/6599jenTw
      7BvUo3oyARSKg3K93c1oC8dtba1yr5EhkOhrkgCir72WAI1Gg+3tbUqlEuVyufnoiUql8rWB
      lFLN91mWRblcRinF3t5e8z2e51Eqlb42TrFYPNFJnPT9Qhx7bQ5QKBTY29tjY2ODZDKJZVlM
      Tk5SrVY5OjrC8zwSiQTlcpkXL14Qi8UIBALs7OwwMTHB4eEh0WiU7e1tNjc3+fa3v82vf/1r
      fvKTn/D48WPGxsZ49OgRqVSKqakp0uk04+Pj7O/vU6/XmZ6eZm1tjcPDQ6amprBtG8dxsG2b
      8fFx1tbWSKVSzURLpVIUCgW2t7eJxWJcu3aNcDjcli+k6E5vTIK3t7fxPI/BwUGuXr1KLpdD
      KYXrujiOg2EYJBIJbNvm4cOHjIyMMDMzQy6Xo9FoUKlUsCyLSCTC5uYmIyMjOI5Do9FgeXmZ
      aDSK4zik02kqlQqLi4uEw2GSySQrKyuMjo7iui4PHz7ku9/9LltbWywtLWFZFuPj42SzWXw+
      H+vr69TrdQzDIBAIMDk5SSaT4fr16+34Ooou9cYcIJFINItLgsFgcwlyJBLBNE2y2SyJRIKj
      oyOCwSCmaRIMBlFKoWka8/PzxONxLl68SCaTYWBggK2tLaLRKLquEwqFMAyDUCiEpmlMTEwQ
      CoWaa/tzuRy1Wo2LFy8SDAbZ3d0lEong9/t58uQJlUqFvb09wuEwPp+P0dFR/H5/sw1CnMRr
      a4E8z6Ner2OaJoZhoOt6c92LpmkopfA8D5/PR61Wa77PMAw8z0MphWmauK6LpmnNvzVNo16v
      Nyu7juMdHR3h9/ub7wGo1WoEAgF0XccwDOr1l5czy+Vys0cZHh5G13V8Pl+zjcdtMAyDw+oR
      f/F3/+O8v5Yd4d/95Z8zNz78te/rlrU6rY7/2hBI1/U3xtBftajsy8Xnry4Me1tRy9uK1d/2
      WiwWe+3jUCgEQCAQIJlM4vP5msny5TZKUYw4qa65EabrerMGWIizIvcBRF/rmh7gJHRNY25s
      qGXx1T/8qbVwMdDxRYWTCgXkwQAnIQUxpyAFMb0TX4ZAoq9JAoi+Jgkg+lpPToKPLId/+R/+
      d8vin0M9TJfsr9L98XsyARSK3WKt3c0QXUCGQKKvSQKIvtbWBDiuK7Bt+43/q1arwMtr+q8W
      5HxVQY3neRweHramoaJntXUOsLy8zPj4OJZlNf/tOA61Wq352PPl5WVisRie55FMJslms4RC
      IW7evMn6+jqhUIjh4WFWV1fx+Xzcvn27nackukxbe4BGo0E+n6fRaOA4Dg8ePGBxcZFEIsHe
      3h6rq6vNzTJs22ZxcRG/38/Vq1dJp9PN11ZWVpibmzvV0gHR39qaAJFIhG9+85sUCgXC4TB+
      v58LFy6QTCaBl8OfZ8+eUavVODw8JBQK4TgO+XyeQCDAwcEBkUgE13WblWtCnERb1wIdr+dw
      XZdqtdoshPH5fNi2jVKKWq1GJBLh6OioWQvQaDSIxWJUKhUMw8Dn81GpVIhGo/h8vr4uiBEn
      09Y5wPFiJsMwiMfjb/2/4xqAVxc+He8O82rxzMDAQEvbKnqTXAYVfU0SQPS1nlwKoWsaU5db
      OCQ6hy1iTlsQI/FPRgpiTkEKYnonvgyBRF+TBBB9TRJA9LWenATXGw7/6j/+unUHOI99Uk+7
      RYzEf6t/8b15/um3pt94vScTwFOK7UK53c0QHaRSa7z1dRkCib4mCSD6WsckgOd57O/vS1GL
      OFcdMwfY2NjA8zwikQie5xGLxSiXy1iWBbx8bLpt21y4cIFsNsuNGzfY2NggkUhgmib5fJ6Z
      mZnm06SFeBcd0wNUKhUuXLjA5uYm2WwW27bZ3Nzk3r17BINBisUi1WqVRqNBrVbjs88+IxAI
      kM1mefr0KePj42xubrb7NESX6ZgeIBqNks/nUUqhlCKbzeI4DhMTE4TDYQ4ODlBKYds2Q0ND
      5PN5isUirusSDocJh8N4nuyRK06mYxJgamqKUqnE2NgYgUCAcrnM1atX0XUd0zSbe4stLCxQ
      r9eZmJhoFtGYpolpmly7dq3dpyG6TMckgK7rrxW1DA394+PNlVIsLCw0t1g6Loj58oYZsoGG
      OKmOSYA/RdO05g+9EGepYybBQrRDV/QAJ6VrGuOp+Ne/8ZTO5eG4nbWUpuvjxyOBt74uBTGn
      IAUxvRNfhkCir0kCiL4mCSD6Wk9OgusNh3/9n/7PqT//3/z8e1wceHMXe9F7ejIBPKXIPH/7
      Y9TfheO4Z9ga0clkCCT6miSA6GtdlwA9eNtCtFHHJ4DneTx58gSAtbU1dnd3UUrhui5KKRzH
      QSmF53myHFqcWFdMgjc3N6nX61QqFSzLYmtrC9M0mZqaIp1OY5omz58/Z2ZmhpmZmXY3V3SR
      ju8BAJLJJDMzM/h8PhzHYXR0lP39fQqFAkopKpUKIyMjTE+/+dwXIf6Uju8BNE1jdHSUYDDI
      pUuX0DQN27ZJJBIkEglKpRJDQ0NEIhHZI0ycWFckwKVLlwC4fPly8/WxsTEABgcH29Iu0Ru6
      YggkRKtIAoi+1vFDoNPQNY1LQ9FTf75pyO+FfiEFMacgBTG9E19+1Ym+Jgkg+pokgOhrPTkJ
      rjcc/uY//7Zl8WWDmN6J35MJ4CnFk2cH7W6G6AIyBBJ9TRJA9LWOTQDP83BdF9u236kIxnEc
      6vX6ObRM9JKOnQMUi0X29/d58eIF09PT7O/vMzk5SblcptFoUC6XSaVSOI5DoVBgZGSEUqnE
      xMREu5suukjH9gAAf/jDH7h69Sq2bZPL5cjlcty/f59yuUw0GuXp06fYts3Ozg67u7vtbq7o
      Qh3bAwDcuXOHTCaD67rNvcNmZ2dxHIdYLMaLFy/IZDLEYrHm8gQhTqJjEyAejxONRhkbG8Oy
      LCzLIplMNoteDMNgbm4O27ap1+vE43F0vaM7NNGBOjYBXl3M9lU7P4ZCIUKhEPF46x6FLnqb
      /MoUfU0SQPS1jh0CvQ8NjeFEuMVHUbR4jxiJfw7xpSDmFKQgpnfiyxBI9DVJANHXJAFEX+vJ
      SXC94fC3/+X/tvAIrd8oVSl1qifdfffWFX78yXwLWtSbejIBPKVIZwvtbkZbTF1OtrsJXUWG
      QKKvSQKIvnZuCXC8gYXjOH/yfbVa7bWPXdd9o9DleEMMId7Xuc0BcrkcAIVCgdnZWXw+H57n
      Ua1WARgYGODo6IiNjQ2mp6dRSpHP50mlUjx69IiZmRmi0Sjb29sMDg7y4MED7ty5g2VZaJrG
      7u5uM64Q7+rcEsB1XX7/+9/z4x//mLW1NQYHBzk6OiKTyTAxMUEgEGBjY4NqtcrDhw+JRCKY
      ponneYRCIba3tymVSs2VofF4nGKxSC6XY35+HsuyWFlZYWFh4bxOSfSAcxsCGYbBxx9/zMrK
      CrZts7e3B8D8/DzBYJBCoUC9XkfXdTzPa5Y4HhwckEgkME0TXdeJRqMMDw839wabn58nl8sR
      i8W+dnglxJedWw8wMjKCYRhcuHAB13WpVCoMDw+j6zqGYZDP55mbmyMQCKBpGvV6nbGxMVKp
      VHP+oJTi4OCAaDTK5OQk0WiUQCBAOBymWCy+toGGEO/i3BIgEAgAEIvFgJf7fr3qypUrr30c
      CoUYGBh4I04kEgHg4sWLzddM0yQcbvXqT9GL5DKo6GuSAKKv9eRSCA2NRDTQugO0finQqes9
      QgG5DHwSUhBzClIQ0zvxZQgk+pokgOhrkgCir/XkJNhqOHz6X/9fy+K/nDWdrmDl3Y/RGfH/
      7MNJfvDhZMva0W49mQCuUjzckIflnoVbk6l2N6GlZAgk+pokgOhrHZkAb9sZxrbt5mrPL9+6
      sCxLHo8uTqUj5wBffPEFkUgEXde5cuUKBwcHBAIBdnd3GR0d5fHjx0xMTODz+ajVariu21w1
      mkgk2t180UU6sgcAqFar+P1+VldXcV2X3d1dgsEgmUwG0zQZHBzEsizW19cpFovcu3dP6gHE
      iXVkD+D3+5vLnjVNQymFUorBwUHq9TqmaeK6LplMhnA43CyOkWGQOKmOTIC5uTkikQjFYpFU
      KkW5XObq1atomtYcGh0eHjZLIePxOKFQqFlfLMS76sgEiEajAM2CmFeLZ44XQL1t1xgZ/4uT
      6tg5gBDnQRJA9LWOHAK9Lw2IBLu7MKRT9lfx+1pX89AJpCDmFKQgpnfiyxBI9DVJANHXJAFE
      X+vJSbBlO/zdf/usZfHP46EQnlLoX1GwMjs2xM/+/HYLj94/ejIBXE/xx7WddjejZXRDOu6z
      Il9J0dckAURf64oEOF7pKTvDiLPWFXOAlZUVHMchlUphWRbDw8McHR3h8/k4PDxkaGiI7e1t
      JiYmWnoDTPSerugBUqkUBwcHaJpGsVhkcXGRYrHI0tISjUaDer3O4eEh6XS63U0VXaYrEsA0
      TRYWFtjY2EApRTgcZmZmhunpaba2tkin00SjURqNRrubKrpMV4wXDMNgZ2eHhYUFPM9rPtBJ
      0zQmJycZGBhgf3+fkZGRNrdUdJuuSIBYLNbcWeZVqVTqtfcIcVJdMQQSolUkAURf64oh0Elp
      gN/s3UIOnyyFODNSEHMKUhDTO/HlV4noa5IAoq9JAoi+1pOTYMt2+bf//f+37gDH06YT7uDy
      83+2wFhKHt7VSXoyAVzP44uVZ+1uxhv++T+Zb3cTxJfIEEj0NUkA0dc6LgH+VNHL8WPShTgr
      HTUH8DyPzz//nEQiwfXr18nn86RSKY6OjqhUKiQSCRqNRrM6bGBggHw+z8jICH/84x+5fv16
      84nSQryLjkoATdOIRqNYlsXm5iZ+v5/l5WWq1SrxeLx5B3ZnZwdd1zEMg729PUqlEq7r4vf7
      23wGott01BBIKcXExASGYXBwcEAoFEIpRSwWIx6P43keSimCwSA+n49nz55hmiae5xGJRFp6
      6130po7rAcrlMslkkrGxMTY3N5mdnUUp1Vzb43keuVyO6elpkskk+Xye4eFhPM/j8PCQ4eHh
      Np+F6CYdlwDj4+PNj69du/bGe5RSfPzxxwQCAQBmZmbOrX2i93TUEOhdaJrW/OEX4n11XQII
      cZY6agh0lk64TEf0KSmIOQUpiOmd+DIEEn2tZ4dAjuO0LPbxkoxWdp6e57X0HCT+Sz2bAK0c
      Ah3fkGvlEAhaew4S/x9inEE7Oo6ut3Zkp2la8+l0rdLqc5D4L/XkJFiId2V8+umnn7a7Ea1Q
      KpVYWloiEolQKpWo1Wroun7qKwdra2tsbW2RTCZZXl6mXq9Tr9fx+/3s7u6+16MZd3Z2KBaL
      hEIhHj58iOu6VKtV1tfXGRwc5MWLF1QqFUzTPFW3X6lU2NjYYHh4mEePHrG7u0soFGJpaYlQ
      KESxWEQpRbVaJRQKnTh+uVxmaWkJx3Ga7R4YGGg+vduyLPx+P/l8nng8fuL4tm2zvLxMoVDA
      MAzW1taIRCKsrKwAUK1WMU2TQqFANBo9UeyeHAIBbGxscOvWLR4+fIht2yil+M53vnPqePl8
      noWFBV68eEEqlSKXy6HrOplMhps3b75XW3VdZ39/H9d1uXz5MtlsFqUUMzMzZDIZnj17RiQS
      4eLFi6eK77oulUoFx3HY39/nww8/ZGNjg/n5edLpNLZt4zgOH3300ani+3w+5ufnWVxcxOfz
      MTk5yRdffMH09DT5fB5d19nc3Dz1shVN05iZmeHu3bu4rsvIyAi7u7uMjY3x9OlTNE3j6dOn
      p/o+9PRlUNM0UUpRKpXee8J0+/bt5m9Pn8+Hrus0Gg2q1ep7L8MeGBhA13Ucx8Hv92MYBpqm
      4fP5cF2X/f19AoHAqecdiUQCwzAwDIMbN27w2Wef4bpuszes1Wq4rnvqSb3ruty9e5c7d+6g
      aRqmaWJZFoFAoHlexz3caWiaxuLiIjdu3ODatWtsbm7y/Plz/H7/a9+H0yyR6dkhkOM4rKys
      MDo6SjweJxwOYxgGwWDwxLFc12V9fZ1Go8Hs7Cyrq6sEAgESiQTz8/Nks9n3WoW6urrK8+fP
      mZiYIJ1OEw6HCQQCZLNZpqenCYfDmKZJIBA4VbLlcjlyuRzBYJCdnZe7Z46NjbGyssKlS5cI
      hUJcuXKFg4MDEomTP7Uik8lg2zbw8hLx1tYWt2/fZmVlhVAoRCKR4NatWzx58oRUKnXiRC6V
      Smxvb+O6Lp7nUSwWmZqaYnV1lXg8TjQaZXZ2lq2tLYaGhk4Uu6cnwcd7CZzFFZvj6/66rp9p
      3C97df+D4+OdpeNvt6ZpLTmP8/g6KaXOrP09nQBCfJ2engMI8XUkAURfkwQQPen4ySFfRxJA
      tEWxWOQ3v/kN6+vr3L9/n1qtRqPR4PPPP6dUKtFoNKjVanieR6VSwXVd9vb2+MUvfkE6neaX
      v/wltm1TrVZxXRfLsrBtm1qthmVZ3Lt3r3l59PgK1dv07I0w0dkikQjZbJZKpcLs7Cy/+tWv
      CAQCHBwcYFkWGxsbFItFbt68ST6f50c/+hFKKQqFAvfv38dxHNLpNL/97W/54IMP+N3vfsf3
      v/99VlZW0HWdgYEByuUya2trxGIxfvazn721HdIDiLY4vq+xu7uLYRhcv34dXdeZm5vj9u3b
      PH36lAsXLnD58mXq9Trb29sAfOMb36BUKhGNRnnw4EFzicUPfvADkskkk5OTKKVoNBoopfjh
      D3+IZVlf3Y7zOmEhXqVpGp988gm7u7tMTU3x5MkTvvWtbzEyMsLKygo//elPyWazhMNhLl68
      yJUrVwiHw3zyySf4fD4ODg5QSpHNZpmZmWlupZtOp1FK8eGHHxKNRkkmk9y5c+er2yH3AUSv
      qNVqLC4uMjc3x+Dg4Dt9jiSA6Gt/DyIvHUh/ofbgAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='FIGURE 2.3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='FIGURE 2.5' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='FIGURE 2.6' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='FIGURE 2.7' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='FIGURE 2.8' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAXMklEQVR4nO3daXAcd3rf8e/cM5gZ3DcwAAGQBCkIEO9LoqjQJZHURs7uRl6pHJWv8qZS
      yVbs1CaulLOVyovYVYmT9TqxY5eS8rosF0WttKLWu1xxTUhLURAhgjdBCCQIYHAQx1wYYAaY
      u7vzgiZWFIcEMIOVQPXzeUXONP7dL/o3ff2ffgyapmkIoVPGL3oDhPgime/+Q9M00un0F7kt
      Qnzu7glAIpH4IrdFiM+dQa4BhJ7JNYDQNfPSiwjxxYol0pz75DYXBqYIzi5Q7Hawc1Mtex+r
      x+mw5jW2nAKJNUvTNLzTs/zZm+cYmZ6973tPZSG//2t7aKktwWAw5LQOCYBYs6ZCUf7grzqJ
      LCQfuIy7wMof/8tfoaGyKKd1yDWAWJMUReWvf3rloTs/QDSW4vsnLpNR1JzWkzUAmqYxNTWF
      qt47qKIoTE1N3bf8xMRETisX4kH8swtcGrh/X8vm2rCfyWA0p/VkDYDf7+e73/0uU1NTXL16
      la6uLrq6ugiFQrz++utcunSJQCDA6dOnicVinDp1isHBQT7++OP7QiNELoYmw8v+Vc8oKkOT
      MzmtJ+tdoGvXrtHe3s6lS5cYHR3FZrPh8Xjo6enB4XBw+fJlDAYDfX19xGIxAILBICdPnqSu
      rg6Px5PTxghxVyyxslkJK13+rqxHgJGREdatW8fY2BjFxcVUVVVRX1+Pqqokk0lSqRS9vb2U
      l5eTTN45R+vp6aG6unrx/0Lko6K4YEXLlxc5c1pP1iPAyy+/jNvtZsuWLRiNRoxGI2azmebm
      Zubm5rBarTgcDmZnZykqKkJVVVKpFOl0mrKyspw2RIhPa6ktpchpY26Ji2C4cydoQ31pTuvJ
      GgC32w1AYWHhPZ9brVYKCn6RzE//W4jV5C6wcmTPBo69d33JZZ/b0UKJ257TeuQ2qFiTDAYD
      Lx7YzPbWmocut2V9NS8dbJMHYeLLKZVWeOuDTzh5bvCe0yF3gZXndrbw0sHHsVlMOY8vARBr
      nqZpRBaS3JqYITgbo9htZ5OnnCKXLedf/rskAELX5BpA6JoEQOiaBEDomgRA6JoEQOiaBEDo
      mgRA6JoUxYtHQiKV4ZORAFOhKC21pWzwlGIy5v/7LQEQa54vPM//PNbNzfEQACaTkcO7Wvjt
      I1uwmHOfBgFLnAJpmsbCwgIAqqou69WJiqKQyWQeukwqlSKVSj10mXQ6veLagvn5+RUtL9Y+
      VdX4X2/1LO78cKde+ET3Ld49N5j3+FmPAEePHiUajVJVVcXs7CwHDx7E5XLh9XppbW0lkUhQ
      UFBAJpMhEAjg8XgIh8MkEglMJhPJZJKWlhZeffVV1q9fj91u5+LFi7zyyitEIhHm5ubw+/1s
      27YNs9nM7Ows5eXlBINBCgsLsdlsdHd3Y7PZ2Lx5MwDhcJi6ujpSqRQzMzNUVlYyPT1NVVUV
      6XSaTCbD8ePHOXToEB6PJ+85ImJtGPfPcXM8mPW79y95+dUnW/MaP2sAUqkUkUiEiooKAoEA
      P/nJT9i/fz9jY2MMDw9z9epVduzYQUNDA319fRQVFXHr1i2cTiebNm1aHMdqtRIMBrHb7dhs
      NrxeL52dnTz++ONMT08zPDxMOp0mFovR3t6O3+9H0zQMBgMWiwWr1crJkyf56le/yo0bN7Ba
      rYRCIWw2Gx0dHQwODpJKpQgGg2zatAm/38+JEyf4xje+IYU5XxLReOqBtcGz8/m/yzbrKZDd
      bufAgQP4fD6qq6tpbm4mnU5jt9sZHh5m48aN3Lhxg2AwiNPpZGZmhvLy8sWjQyaTWTwawJ3T
      J7PZzMWLFykqKmJubo6tW7disViYmZmhqakJRVHYvn07RqORaDRKQ0MDAE899RTxeByr1Uo4
      HEZRFAwGA8PDwyiKQiQSobi4mCNHjlBfX09TU9OSp1fi0VFd6sJuzX6p2lhVnPf4WWeDDg4O
      Mj4+TltbG/F4HJvNhs1mI5lMEg6Hqa2txefzUV5eTm9vL42NjcCdCjFVVbFarZSWljI6OorT
      6URVVWKxGMlkkkAgQGNjI263m9nZWYxGIwMDA7S1teF0OgmHwxgMBgYGBti0aRMWiwWHw8Gl
      S5fweDyMjo5y+vRpvvnNbzI0NERNTQ02m41169YxMjKC3W6nuLgYuz23CiGx9nz/3Su88+GN
      ez6zWkz85998mvbmqrzGfuSmQweDd84Hy8vLv+AtEZ+XVFrh7Q/7OXV+mLmFBLVlbn7j0BNs
      b62RegChD5qmsZBIE0ukcRdYcdgsqzKuBEDomkyFELomARC6JgEQuiYBELomARC6JgEQuibT
      ocWap6oagdkFhibDzETjFBXYWF9fSmWJM++aAAmAWLM0TWMyNM/RU71cGpgklvzFNHuH1cyW
      DdW88mwHdRVueTeo+PK57vXz345+tGSTvH//8j62rK/OaR1yDSDWpNuBCP99iZ0f7jTJ+x/H
      zjKapY3qckgAxJqjqhpHO3uX1RwD7oTg705dQ8mhP13WACwsLBAMBu8rgVRVlXA4DEAsFmNu
      bm7xO7/fj6Io940Vj8eZnc0tnUKffOH5ZXeIvOvqkI/J4MpLYrNeBP/whz/E7XazY8cOvF4v
      W7duJRwOk0wm8fv9bN68mc7OTmpqajCZTDQ3N9PZ2Ul9fT27d+/m6tWr1NXV4Xa76ezspLKy
      kqeffnrFGyf0aWgyTDz58Lryz0qmFG7dDuGpLFx64U/JGgBVVYlEIkQiEUZGRhgdHWV4eJgj
      R44wOjpKX18fLS0ti32Du7q6qKmpQdM0Tp8+TTQaXdzxN27cuKINEmImEv/c/i7rKZDD4eDw
      4cNMTk5SUFBAKpWisbGRLVu2AHfe/BAOh5meniYUCmE2mzEajSwsLBCPx5mYmMBqtaIoipz+
      iBV7UAnkUhy2lf9d1r84fPgwLpeL/fv3Mzk5SUlJyWKh+le+8hVUVSUUClFdXc309DSFhYWL
      b3fweDyMjY3hdDqx2+0Eg0Fqah7e50mIT/NUFmI0GFBXcIfeYABPZdGK1yXPAcSaE0+m+Q9/
      eYpxf2TZf1Nd6uJPv3WIAvvKKsXkNqhYcxw2Cy8+8xgrebb74oHNK975QQIg1qin2ht4fu+G
      ZS373M4W/sm2ppzWI6dAYs1KZxTe+qCfv//oJrHE/a/ldNjM/NN9G/nGM21Yc2yVKgEQa964
      f44Pr41xfdhP6B9ng3a0VLG/o4HG6vxejiUBELom1wBC1yQAQtckAELXJABC1yQAQtekJlis
      efFkmp7+CS7enCIcjVNXUcjTTzTS2lCWd1G83AYVa5amaUzNzPOnP/iYgU/1CAMwm4w8u6OZ
      33l+a84PwUBOgcQalkhl+KO//fC+nR8go6i8e26Q1/7hGvn8hj8wAKqq5jWwEPn68dkBbgce
      PiP0RPcAYyuYNfpZWa8BLly4wJUrV2hubmbXrl1YrdbFTowmk4lYLIbRaMRmsxGNRhfrAoqK
      ishkMszPz1NVVYXZLJcYIjfpjEJP/8SSyymqxrlPbtNYtfJaAHhAAHp7e3nqqacYGhrixIkT
      dHR0MDw8zNmzZzl06BD9/f0kk0meeeYZTp06RUdHB16vF03T0DQNm83Gjh07aG9vz2mjhEhl
      lGWXOE7P5N4fOuspkNVqRdM0bt++vdgYL51Os3fvXhoaGnA4HKiqutj18W7/4Ewmg8PhYNeu
      XcTjudV1CgFgMhiX3QU+1xJKeMAR4Otf/zpnzpxh9+7dFBYWMjAwwLZt2zAajZSUlGCx3Ck8
      2LdvH+Pj43R0dHD58mWOHDmCpmmUlZUt2S1eiIexWU1sqC9d1q97W1NFzutZ8W1QRVEYHh6m
      pqYGl8uV84qFWMqNsSB/+Op7KOqDd9GGyiL+5F8/m/NRYMW3QU0mExs2bJCdX/zStXrK+PVn
      2zGbsu+mxS47//af78Jmyf0USB6EiTVN0zS6+27zxvt9jPpm0bQ7D8F2tNbyynMdK34R1mdJ
      AMQjQdM0ArMxZucTVJY4KXbZV2VcCYDQNZkKIXRNAiB0TQIgdE0CIHRNAiB0TQIgdE0CIHRN
      AiB0TQIgdC1rANLpNJqmkUqliEajqDm0nxRiNWmaRjSW4vqwn/l4atXGzRqA48ePE41Gee21
      17h27RoLCwv09PQwNzfHhQsX8Pl8+P1+hoaGVm1DhHiYufkkf/BXp/hP/+99Xv3xRdSHTJFe
      iazzSBcWFjh69CjT09M4nU7S6TSffPIJNTU1eL1efv7zn1NaWkpZWRktLS2rsiFCPMzA7RCT
      wSgAvUN3jgKFTlve42Y9AjidTl566SXq6+sB8Hg8FBYWcvr0aQKBAAaDAbfbzXPPPZf3Bgix
      HI1VRYszQJtqi3Nqh5RN1tmgMzMzFBUVMTMzg8lkwmw24/V6aW5uZmxsjOLiYhwOB8XFxRjz
      fDOXEMuhaRq3A1H6RwM80VJFVenqFGTJdGiha/LzLXRNAiB0TQIgdE0CIHRNAiB0TQIgdE0C
      IHRNAiB0TQIgdE06WIg1TdNgIhjh55dG6PX6mJtPUFXqYm+bh/0dDbgc1rzGl6kQYs1SNY13
      Px7kaGdv1hoAT2Uh/+7X9tBcW4LBYMhpHRIAsSZpmsZ7F738+fEeHraHlrjt/PE3f4XacndO
      65FrALEmhebi/M3JKw/d+QHC0QTff/cKipJb1WLWAIRCIZLJJH6/f1mDjIyMSEcYsao+7B0j
      Glte6ePlgamc+4RlvQh+//33sVgs1NfXc+XKFTweD2azmUAggM1mw+fz8eSTT3Lx4kVqamq4
      du2adIUUq+rGaGDZy6YVlcGJMHUVK+8VkPUIMD8/T3d3N21tbYRCId5++20++ugjMpkMFy9e
      RFVVRkZGCIVCHD9+XPoJi1UXXWHh+3w8mdN6sgbA5XLxwgsvcOzYMSYmJrBarTidTrZv305B
      QQFlZWUEAoHF74RYbSUux8qWd69s+buy3gXKZDIYjUYURSGZTGK1WjEajZhMJhRFWbzllEgk
      sFgsi9/leitKiM/6h/ND/MXx88ta1mEz879/7wgVxc4VryfrEcBsNmM0GrFYLLhcLqxWK2az
      GYPBgNlsxmQyYTKZcDqd93wnxGrZ21ZP9TLrfp/uaKSsqCCn9chtULEmuRw2/tU/24HF/PBd
      tKGqiH/xbDtGeRAmvmw0TePqkI+/fOfCfbc5DcC21hq+9bVdlBbmdv4PEgCxxmkaJFJpzt+Y
      5LrXz+x8gupSF3seq2dTQzlGY36n3hIAoWtyDSB0TQIgdE0CIHRNAiB0TQIgdE0CIHRNAiB0
      TSbwi0dCZCHJxYEppkJR1teVsnVDNRazKe9xJQBizRudnuVPjp1l3B8BwGg08FS7h3/ztV3Y
      rfntwllPgVRVRdO0h3aHzGQyzM/fOz8jEomgKMo9n2maJgUzImeKovLnx88v7vwAqqpx5uoY
      Pzk7kPf4WePz9ttvU1VVRSwWY+fOnSiKgtlsJhqNYjabKS4uZnJykuHhYdrb2zEYDITDYa5f
      v05jYyNtbW34fD6sVivd3d20tLRQX19PIpFAVVUymQwtLS0yhVosadQ3x/BkOOt3p6+M8OIz
      j+U1ftYARKNRLly4wLe//W26urqYn5/H6XQSCAQwm83s3LmToaEh+vv7MRgM9Pf3s3HjRtLp
      NHNzc7z55ptMTk4CUFtbC8Bbb71FQ0MDLpeLzs5OvvOd72C32/PaePHlF0+mH9gSdWEV+gU/
      sCRy7969XLlyhampKUKhEBaLheeffx4Ar9e7eJqUSqXYs2cPfX19JJNJtm3bRiKRIJVKsXnz
      Zurq6gAoKSnhwIEDXL9+HbvdLs23xbLUlRc+sCPk+vqyvMfPOhs0EAhQWFhIMBjE7/fjdrsp
      LS3F6XQSDoeZmprC4/FgNBqJxWIkEgkSiQRVVVUUFxcTDoeJRCKkUimampoYHByksrKSiooK
      BgcHF8NhMuV/FS++/I69d51j713n0ztqgd3Cf/mtA7Q2lOc1tkyHFmueoqr8rGeIE923CMwu
      0FRbwm8d3sLmxvx2fpAAiEeEpmlkFJWMomIxmzCbVucZrgRA6JpMhRC6JgEQuiYBELomARC6
      JgEQuiYBELomARC6JgEQuiYBELomFWHikeCbmafzopdx/xzVpS4O7Wqhpiy3zpCfJlMhxJrX
      3TfOn73VQzyZXvzMbjXzra/tZP8TjXmNnfUUKBgM4vV6SSZ/0XdpZmaGSOROWVo8Hr9nPn8o
      FLqvPFKI1eALz/MXx8/fs/MDJFIZ/s87F5gKRfMaP+sp0MmTJyksLOTcuXO0tbUxNzeH0WjE
      6/Wye/duTp48ydatW3E4HGQyGTKZDG63G5fLRVNTU14bJMSnfdQ7/sB2qbFkmjNXR3np4OM5
      j5/1CJBOp7l8+TLl5eV88MEHjI2NMTU1RUVFBV1dXRQVFVFfX08wGOTo0aMoisKbb76JxZK9
      ckeIXE0GH/4LP7HE90vJGgCn08nBgwfx+XxkMhkCgQAOh4OamhrMZjNlZWXcvHmTvr4+SkpK
      AGhqasLr9ea1MUJ8VrHr4XXjS32/lKwXwclkEovFQjweX6z7dbvdGAwGMpkMJpOJ+fl5DAYD
      BoOBgoI7DcoymQwOR+7taoT4rIHxEH/4f98jnbm/htxkNPBff/cgj62ryHl8uQsk1jRN0/i7
      U728fab/nrdDGA0GXnhyI799ZEter9eRAIg1T1FVPuod50T3rTvPAcpcvLBvI093NGLKszRS
      AiB0TaZCCF2TAAhdkwAIXZMACF2TAAhdkwAIXZMACF2TAAhdkwAIXZMAiEdGIpXBH15gIZF/
      Z5i7pCZYrHmapnH2+jhvvN+HL7xAaaGDlw+28fQTjXn3mcs6F+huh0ij0UgqlcJms+W1EiHy
      cfnWFH/02of3TIk2m4z8x19/kp2b6/IaO+sR4NixY2QyGfbt28fk5CStra1omkYsFsPhcKCq
      KslkknXr1kmnR/FL9/cfDdxXD5BRVN7pupl3ALJeA5SXl7OwsIDdbmdycpLvfe973Lhxgzfe
      eIOJiQmGh4d5/fXXmZmZyWvlQiyHbyb7Cxd84fxfxJD1CFBbW4umaVy6dAlVVdmwYQN79uwh
      nU7T09NDKpXC5XKRSCTy3gAhllJXUZi19reuvDDvsbMGoKCgALfbzf79+5mdnUVVVUwmEy6X
      i8OHDxOPx0mlUpSV5d+mUoil/OqTrVwZnCaVVhY/s5iNfHV/a95jS0GMWPM0TePK4DSvd15n
      PBChqsTFK8+2s7215pdzF0iItSidUUikMlgtZmyW1ekxLQEQuiZPgoWuSQCErkkAhK5JAISu
      SQCErkkAhK5JAISuSQCErkkAhK5JAISuSUmkeCQoqsqNsRBjvjk2NZSxrrp4VYqxsgYgFosR
      DAaprq7GarXe973P56Oqquq+zxOJBHZ7fi1rhPgsRVX5/k+v8NOPb6GoGi6Hld97cTe78qwG
      gwcE4Ac/+AG1tbWYzWZGR0cpLy/HbDYzNjbGE088wc2bNwmFQvj9fnbu3Mn58+dpbGzknXfe
      4dChQzz22GN5b5gQdw3enuHdc4Mo/9ghZj6e4m9/dpUt66ux5jkrNGsAHn/8cc6cOUNBQQEj
      IyNcvnwZh8PBxo0b6erqIhgM0t/fz6ZNm+ju7sbn83H+/HkKCgqyHhmEyMftQISMcm9N8Ewk
      TmQhSXlxQV5jZ70Ijsfj1NXVMT09TTgcRlEUbDYbTU1NKMqdqpxMJsP09DQzMzPEYjFsNhtl
      ZWVMTU3ltUFCfJansgjzZ1ohlRUWUOjK/20lWesBIpEI0WiUqqoqAoEABQUFWCwWrFYrqVQK
      VVX50Y9+xMGDB6moqMDn8+FyubBarSwsLFBeXp73hglxl6KqvPaza/z47AAZRaXQaeP3X9zN
      9tbavMfOuSBGLnjF50lRVQYnwoz759hYX4ansnBV7gJJRZjQNXkQJnRNAiB0TQIgdE0CIHTt
      /wMI177r7J3fdwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='FIGURE 2.9' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
